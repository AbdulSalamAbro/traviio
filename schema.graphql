# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Address broken down"
type Address {
    country: String!
    line1: String!
    state: String!
    town: String
}

"Adult details in a booking"
type Adult {
    additionalInformation: String
    additionalTravellers: [String]
    address: Address
    dob: String!
    email: String!
    name: Name!
    nationality: String
    passportCopy: String
    passportExpiry: String
    passportNumber: String
    phone: Phone
    travelInsuranceCopy: String
}

"Tour Booking"
type Booking {
    _id: ID!
    adults: [Adult!]!
    children: Int!
    email: String!
    from: String!
    guests: Int!
    hotelType: String!
    optionalTours: [OptionalTour!]
    paid: Float!
    price: Float!
    requests: [String!]
    roomType: String!
    stagedOptionalTours: [OptionalTour!]
    status: Status!
    to: String!
    tour: ID!
    user: User
}

type Mutation {
    "[Auth required] Add new booking"
    addBooking(booking: AddBookingInput!): String
    "[Public] Get access token and refresh token after adding a new"
    addUser(user: AddUserInput!): Tokens
    "[Webhook only] Complete booking"
    completeBooking(booking: String!, paid: Int!, token: String!): Boolean
    completeExtrasBooking(booking: String!, token: String!): Boolean
    updateBooking(booking: UpdateBookingInput!): String
    "[Authenticated] Update user details"
    updateUser(user: UpdateUserInput!): User
    updateUserPassword(email: String!, new_password: String!, old_password: String!): Boolean
}

"Name broken down"
type Name {
    designation: String
    firstName: String!
    lastName: String
    middleName: String
}

type OptionalTour {
    cityID: String!
    cityName: String!
    price: Int!
    visitID: String!
    visitName: String!
}

type Phone {
    code: String
    number: String
}

type Query {
    "[Auth required] Get booking by id"
    booking(id: String!): Booking
    "[Backend] Get access token from refresh token and update the refresh token in the backend"
    getAccessToken(refreshToken: String!, secret: String!): Tokens
    "[Public] Get access token and refresh token"
    loginUser(email: String!, password: String!): Tokens
    "[Authenticated] Get a user by email"
    user(id: String): User
    "[Admin] Get all users"
    users: [User]
}

"Token received on authentication"
type Tokens {
    access: String!
    refresh: String!
}

"User type"
type User {
    _id: ID!
    bookings: [Booking!]
    dob: String
    email: String!
    name: Name!
    nationality: String
    phone: Phone
    refreshTokens: [String!]
}

"Payment status"
enum Status {
    PAID
    UNPAID
}

"Arguments to add booking"
input AddBookingInput {
    adults: [AdultInput!]!
    children: Int!
    email: ID!
    from: String!
    guests: Int!
    hotelType: String!
    optionalTours: [OptionalTourInput!]
    price: Float!
    roomType: String!
    to: String!
    tour: ID!
}

"Arguments to add user"
input AddUserInput {
    email: String!
    name: NameInput!
    password: String!
}

"Address broken down"
input AddressInput {
    country: String!
    line1: String!
    state: String!
    town: String
}

"Adult details in a booking"
input AdultInput {
    additionalInformation: String
    additionalTravellers: [String]
    address: AddressInput
    dob: String!
    email: String!
    name: NameInput!
    nationality: String
    passportCopy: String
    passportExpiry: String
    passportNumber: String
    phone: PhoneInput
    travelInsuranceCopy: String
}

"Name broken down"
input NameInput {
    designation: String
    firstName: String!
    lastName: String
    middleName: String
}

input OptionalTourInput {
    cityID: String!
    cityName: String!
    price: Int!
    visitID: String!
    visitName: String!
}

input PhoneInput {
    code: String
    number: String
}

"Arguments to update booking"
input UpdateBookingInput {
    adults: [AdultInput!]
    children: Int
    guests: Int
    hotelType: String
    id: ID!
    requests: [String!]
    roomType: String
    stagedOptionalTours: [OptionalTourInput!]
}

"Arguments to update user"
input UpdateUserInput {
    dob: String
    email: String
    name: NameInput
    nationality: String
    phone: PhoneInput
}
